[tox]
envlist = py{37,38,39,310}
toxworkdir=.tox
download=true

[pytest]
testpaths = tests
python_files = tests.py test_*.py *_tests.py

[genericenv]
deps =
    -rrequirements/generic/common.txt
    -rrequirements/generic/csv.txt
    -rrequirements/generic/excel.txt
    -rrequirements/generic/mysql.txt
    -rrequirements/generic/neo4j.txt
    -rrequirements/generic/sqlite.txt

[buildenv]
deps = -rrequirements/build.txt

[executableenv]
deps = -rrequirements/executable.txt

[testingenv]
deps = -rrequirements/testing.txt

[checkerenv]
deps = -rrequirements/checker.txt

[pycodestyle]
max-line-length = 88
exclude =
    .coverage,
    .eggs,
    .git,
    .tox,
    .pytest_cache,
    build,
    coverage,
    dist,
    venv,
    __pycache__,

[flake8]
max-line-length = 88
exclude =
    .eggs,
    .git,
    .tox,
    build,
    coverage,
    dist,
    venv,
    __pycache__,

[testenv:py{37,38,39,310}-pycodestyle]
description = Runs pycodestyle style checker. See: https://github.com/pycqa/pycodestyle
envdir =
    py37: {toxworkdir}/.py37-checkers
    py38: {toxworkdir}/.py38-checkers
    py39: {toxworkdir}/.py39-checkers
    py310: {toxworkdir}/.py310-checkers
skip_install = true
deps = {[checkerenv]deps}
commands = pycodestyle {toxinidir}

[testenv:py{37,38,39,310}-flake8]
description = Runs flake8 style checker. See: https://github.com/pycqa/flake8
envdir =
    py37: {toxworkdir}/.py37-checkers
    py38: {toxworkdir}/.py38-checkers
    py39: {toxworkdir}/.py39-checkers
    py310: {toxworkdir}/.py310-checkers
skip_install = true
deps = {[checkerenv]deps}
commands = flake8 {toxinidir}

[testenv:py{37,38,39,310}-black-check]
description = Runs black to check the code style. See: https://github.com/psf/black
envdir =
    py37: {toxworkdir}/.py37-checkers
    py38: {toxworkdir}/.py38-checkers
    py39: {toxworkdir}/.py39-checkers
    py310: {toxworkdir}/.py310-checkers
skip_install = true
deps = {[checkerenv]deps}
commands = black {toxinidir} --check --diff

[testenv:py{37,38,39,310}-black-format]
description = Runs black to reformat code to style guide. See: https://github.com/psf/black
envdir =
    py37: {toxworkdir}/.py37-checkers
    py38: {toxworkdir}/.py38-checkers
    py39: {toxworkdir}/.py39-checkers
    py310: {toxworkdir}/.py310-checkers
skip_install = true
deps = {[checkerenv]deps}
commands = black {toxinidir}

[testenv:py{37,38,39,310}-bandit]
description = Runs bandit security linter. See: https://github.com/pycqa/bandit
envdir =
    py37: {toxworkdir}/.py37-checkers
    py38: {toxworkdir}/.py38-checkers
    py39: {toxworkdir}/.py39-checkers
    py310: {toxworkdir}/.py310-checkers
skip_install = true
deps = {[checkerenv]deps}
commands = bandit -x ./.eggs,./.git,./.tox,./build,./coverage,./dist,./venv,./__pycache__,*tests* -r {toxinidir}

[testenv:py{37,38,39,310}-pytest]
description = Runs pytest. See: https://docs.pytest.org/en/6.2.x/
envdir =
    py37: {toxworkdir}/.py37-testing
    py38: {toxworkdir}/.py38-testing
    py39: {toxworkdir}/.py39-testing
    py310: {toxworkdir}/.py310-testing
skip_install = true
deps =
    {[genericenv]deps}
    {[testingenv]deps}
commands = pytest

[testenv:py{37,38,39,310}-pytest-cov]
description = Runs coverage. See: https://coverage.readthedocs.io/en/6.0.2/
envdir =
    py37: {toxworkdir}/.py37-testing
    py38: {toxworkdir}/.py38-testing
    py39: {toxworkdir}/.py39-testing
    py310: {toxworkdir}/.py310-testing
skip_install = true
deps =
    {[genericenv]deps}
    {[testingenv]deps}
commands =
    coverage run -m pytest
    coverage html -d coverage

[testenv:py{37,38,39,310}-build]
description = Build wheels. https://wheel.readthedocs.io/en/stable/
envdir =
    py37: {toxworkdir}/.py37-build
    py38: {toxworkdir}/.py38-build
    py39: {toxworkdir}/.py39-build
    py310: {toxworkdir}/.py310-build
skip_install = true
deps =
    {[genericenv]deps}
    {[buildenv]deps}
commands =
    py37: python -m build -w -C="--global-option=--python-tag" -C="--global-option=py37"
    py38: python -m build -w -C="--global-option=--python-tag" -C="--global-option=py38"
    py39: python -m build -w -C="--global-option=--python-tag" -C="--global-option=py39"
    py310: python -m build -w -C="--global-option=--python-tag" -C="--global-option=py310"
    py310: python -m build -s

[testenv:py{37,38,39,310}-build-exe]
description = Build executable with PyInstaller. https://pyinstaller.readthedocs.io/en/stable/
envdir =
    py37: {toxworkdir}/.py37-build-exe
    py38: {toxworkdir}/.py38-build-exe
    py39: {toxworkdir}/.py39-build-exe
    py310: {toxworkdir}/.py310-build-exe
skip_install = true
deps =
    {[genericenv]deps}
    {[executableenv]deps}
commands =
    py37: pyinstaller main.py -n Table2XSV-py37 -F --collect-all='table2xsv' --hidden-import='pandas' --hidden-import='neo4j' --hidden-import='neobolt.packstream.packer' --hidden-import='neobolt.packstream.unpacker' --hidden-import='neobolt.bolt' --hidden-import='neobolt.bolt.io'
    py38: pyinstaller main.py -n Table2XSV-py38 -F --collect-all='table2xsv' --hidden-import='pandas' --hidden-import='neo4j' --hidden-import='neobolt.packstream.packer' --hidden-import='neobolt.packstream.unpacker' --hidden-import='neobolt.bolt' --hidden-import='neobolt.bolt.io'
    py39: pyinstaller main.py -n Table2XSV-py39 -F --collect-all='table2xsv' --hidden-import='pandas' --hidden-import='neo4j' --hidden-import='neobolt.packstream.packer' --hidden-import='neobolt.packstream.unpacker' --hidden-import='neobolt.bolt' --hidden-import='neobolt.bolt.io'
    py310: pyinstaller main.py -n Table2XSV-py310 -F --collect-all='table2xsv' --hidden-import='pandas' --hidden-import='neo4j' --hidden-import='neobolt.packstream.packer' --hidden-import='neobolt.packstream.unpacker' --hidden-import='neobolt.bolt' --hidden-import='neobolt.bolt.io'
