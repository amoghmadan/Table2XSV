[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "Table2XSV"
version = "2.1.0"
authors = [
    { name = "Amogh Madan", email = "amoghmadaan@gmail.com" },
]
license = { file = "LICENSE" }
requires-python = ">=3.8,<3.12"
description = "Convert Tabular Data to XSV"
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Utilities",
]
dependencies = ["pandas"]

[project.scripts]
Table2XSV = "table2xsv.bin:execute_from_command_line"

[project.optional-dependencies]
all = ["xlrd", "openpyxl", "odfpy", "pyxlsb", "mysqlclient", "neo4j"]
development = ["tox==3.28.0"]
excel = ["xlrd", "openpyxl", "odfpy", "pyxlsb"]
mysql = ["mysqlclient"]
neo4j = ["neo4j"]

[project.urls]
Documentation = "https://github.com/amoghmadan/Table2XSV"
GitHub = "https://github.com/amoghmadan/Table2XSV"


[tool.setuptools.packages.find]
where = ["src"]
exclude = ["main.py"]


[tool.isort]
profile = "black"

[tool.black]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88


[tool.bandit]
exclude_dirs = [
    "./.eggs",
    "./.git",
    "./.tox",
    "./build",
    "./coverage",
    "./dist",
    "./venv",
    "./__pycache__",
    "*tests*",
]


[tool.mypy]
namespace_packages = true
explicit_package_bases = true
ignore_missing_imports = true
exclude = """venv"""


[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py{38,39,310,311}
toxworkdir=.tox
download=true

[pytest]
testpaths = tests
python_files = tests.py test_*.py *_tests.py

[testingenv]
deps =
    coverage
    pytest
    pytest-cov

[checkerenv]
deps =
    bandit[toml]
    black
    flake8
    mypy
    pycodestyle

[pycodestyle]
max-line-length = 88
exclude =
    .coverage,
    .eggs,
    .git,
    .tox,
    .pytest_cache,
    build,
    coverage,
    dist,
    venv,
    __pycache__,

[flake8]
max-line-length = 88
exclude =
    .eggs,
    .git,
    .tox,
    build,
    coverage,
    dist,
    venv,
    __pycache__,

[testenv:py{38,39,310,311}-mypy]
description = Runs mypy type checker. See: https://github.com/python/mypy
envdir =
    py38: {toxworkdir}/.py38-checkers
    py39: {toxworkdir}/.py39-checkers
    py310: {toxworkdir}/.py310-checkers
    py311: {toxworkdir}/.py311-checkers
skip_install = true
deps = {[checkerenv]deps}
commands = mypy {toxinidir} --install-types --non-interactive

[testenv:py{38,39,310,311}-pycodestyle]
description = Runs pycodestyle style checker. See: https://github.com/pycqa/pycodestyle
envdir =
    py38: {toxworkdir}/.py38-checkers
    py39: {toxworkdir}/.py39-checkers
    py310: {toxworkdir}/.py310-checkers
    py311: {toxworkdir}/.py311-checkers
skip_install = true
deps = {[checkerenv]deps}
commands = pycodestyle {toxinidir}

[testenv:py{38,39,310,311}-flake8]
description = Runs flake8 style checker. See: https://github.com/pycqa/flake8
envdir =
    py38: {toxworkdir}/.py38-checkers
    py39: {toxworkdir}/.py39-checkers
    py310: {toxworkdir}/.py310-checkers
    py311: {toxworkdir}/.py311-checkers
skip_install = true
deps = {[checkerenv]deps}
commands = flake8 {toxinidir}

[testenv:py{38,39,310,311}-black-check]
description = Runs black to check the code style. See: https://github.com/psf/black
envdir =
    py38: {toxworkdir}/.py38-checkers
    py39: {toxworkdir}/.py39-checkers
    py310: {toxworkdir}/.py310-checkers
    py311: {toxworkdir}/.py311-checkers
skip_install = true
deps = {[checkerenv]deps}
commands = black {toxinidir} --check --diff

[testenv:py{38,39,310,311}-black-format]
description = Runs black to reformat code to style guide. See: https://github.com/psf/black
envdir =
    py38: {toxworkdir}/.py38-checkers
    py39: {toxworkdir}/.py39-checkers
    py310: {toxworkdir}/.py310-checkers
    py311: {toxworkdir}/.py311-checkers
skip_install = true
deps = {[checkerenv]deps}
commands = black {toxinidir}

[testenv:py{38,39,310,311}-bandit]
description = Runs bandit security linter. See: https://github.com/pycqa/bandit
envdir =
    py38: {toxworkdir}/.py38-checkers
    py39: {toxworkdir}/.py39-checkers
    py310: {toxworkdir}/.py310-checkers
    py311: {toxworkdir}/.py311-checkers
skip_install = true
deps = {[checkerenv]deps}
commands = bandit -x ./.eggs,./.git,./.tox,./build,./coverage,./dist,./venv,./__pycache__,*tests* -r {toxinidir}

[testenv:py{38,39,310,311}-pytest]
description = Runs pytest. See: https://docs.pytest.org/en/6.2.x/
envdir =
    py38: {toxworkdir}/.py38-testing
    py39: {toxworkdir}/.py39-testing
    py310: {toxworkdir}/.py310-testing
    py311: {toxworkdir}/.py311-testing
skip_install = true
deps =
    .[all]
    {[testingenv]deps}
commands = pytest

[testenv:py{38,39,310,311}-pytest-cov]
description = Runs coverage. See: https://coverage.readthedocs.io/en/6.0.2/
envdir =
    py38: {toxworkdir}/.py38-testing
    py39: {toxworkdir}/.py39-testing
    py310: {toxworkdir}/.py310-testing
    py311: {toxworkdir}/.py311-testing
skip_install = true
deps =
    -e.[all]
    {[testingenv]deps}
commands = pytest --cov-report=html --cov-report=term --cov-report=term-missing --cov=src/table2xsv tests/

[testenv:py{38,39,310,311}-build]
description = Build wheels. https://wheel.readthedocs.io/en/stable/
envdir =
    py38: {toxworkdir}/.py38-build
    py39: {toxworkdir}/.py39-build
    py310: {toxworkdir}/.py310-build
    py311: {toxworkdir}/.py311-build
skip_install = true
deps =
    -e.[all]
    build
commands =
    py38: python -m build -w -C="--build-option=--python-tag" -C="--build-option=py38"
    py39: python -m build -w -C="--build-option=--python-tag" -C="--build-option=py39"
    py310: python -m build -w -C="--build-option=--python-tag" -C="--build-option=py310"
    py311: python -m build -w -C="--build-option=--python-tag" -C="--build-option=py311"
    python -m build -s

[testenv:py{38,39,310,311}-build-exe]
description = Build executable with PyInstaller. https://pyinstaller.readthedocs.io/en/stable/
envdir =
    py38: {toxworkdir}/.py38-build-exe
    py39: {toxworkdir}/.py39-build-exe
    py310: {toxworkdir}/.py310-build-exe
    py311: {toxworkdir}/.py311-build-exe
skip_install = true
deps =
    -e.[all]
    pyinstaller
commands = pyinstaller src/main.py -n Table2XSV -F --collect-all='table2xsv' --hidden-import='pandas' --hidden-import='neo4j' --hidden-import='neobolt.packstream.packer' --hidden-import='neobolt.packstream.unpacker' --hidden-import='neobolt.bolt' --hidden-import='neobolt.bolt.io'
"""
